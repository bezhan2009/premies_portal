// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mobile_bank.proto

package mobile_bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MobileBankService_UploadMobileBankData_FullMethodName = "/MobileBankService/UploadMobileBankData"
	MobileBankService_CleanMobileBankTable_FullMethodName = "/MobileBankService/CleanMobileBankTable"
)

// MobileBankServiceClient is the client API for MobileBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MobileBankServiceClient interface {
	UploadMobileBankData(ctx context.Context, in *MobileBankUploadRequest, opts ...grpc.CallOption) (*MobileBankUploadResponse, error)
	CleanMobileBankTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MobileBankCleanResponse, error)
}

type mobileBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMobileBankServiceClient(cc grpc.ClientConnInterface) MobileBankServiceClient {
	return &mobileBankServiceClient{cc}
}

func (c *mobileBankServiceClient) UploadMobileBankData(ctx context.Context, in *MobileBankUploadRequest, opts ...grpc.CallOption) (*MobileBankUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MobileBankUploadResponse)
	err := c.cc.Invoke(ctx, MobileBankService_UploadMobileBankData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileBankServiceClient) CleanMobileBankTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MobileBankCleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MobileBankCleanResponse)
	err := c.cc.Invoke(ctx, MobileBankService_CleanMobileBankTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MobileBankServiceServer is the server API for MobileBankService service.
// All implementations must embed UnimplementedMobileBankServiceServer
// for forward compatibility.
type MobileBankServiceServer interface {
	UploadMobileBankData(context.Context, *MobileBankUploadRequest) (*MobileBankUploadResponse, error)
	CleanMobileBankTable(context.Context, *emptypb.Empty) (*MobileBankCleanResponse, error)
	mustEmbedUnimplementedMobileBankServiceServer()
}

// UnimplementedMobileBankServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMobileBankServiceServer struct{}

func (UnimplementedMobileBankServiceServer) UploadMobileBankData(context.Context, *MobileBankUploadRequest) (*MobileBankUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMobileBankData not implemented")
}
func (UnimplementedMobileBankServiceServer) CleanMobileBankTable(context.Context, *emptypb.Empty) (*MobileBankCleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanMobileBankTable not implemented")
}
func (UnimplementedMobileBankServiceServer) mustEmbedUnimplementedMobileBankServiceServer() {}
func (UnimplementedMobileBankServiceServer) testEmbeddedByValue()                           {}

// UnsafeMobileBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MobileBankServiceServer will
// result in compilation errors.
type UnsafeMobileBankServiceServer interface {
	mustEmbedUnimplementedMobileBankServiceServer()
}

func RegisterMobileBankServiceServer(s grpc.ServiceRegistrar, srv MobileBankServiceServer) {
	// If the following call pancis, it indicates UnimplementedMobileBankServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MobileBankService_ServiceDesc, srv)
}

func _MobileBankService_UploadMobileBankData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MobileBankUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileBankServiceServer).UploadMobileBankData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileBankService_UploadMobileBankData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileBankServiceServer).UploadMobileBankData(ctx, req.(*MobileBankUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MobileBankService_CleanMobileBankTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MobileBankServiceServer).CleanMobileBankTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MobileBankService_CleanMobileBankTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MobileBankServiceServer).CleanMobileBankTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MobileBankService_ServiceDesc is the grpc.ServiceDesc for MobileBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MobileBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MobileBankService",
	HandlerType: (*MobileBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMobileBankData",
			Handler:    _MobileBankService_UploadMobileBankData_Handler,
		},
		{
			MethodName: "CleanMobileBankTable",
			Handler:    _MobileBankService_CleanMobileBankTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mobile_bank.proto",
}
