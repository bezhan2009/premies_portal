// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: cards.proto

package cards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CardsService_UploadCardsData_FullMethodName = "/CardsService/UploadCardsData"
	CardsService_CleanCardsTable_FullMethodName = "/CardsService/CleanCardsTable"
)

// CardsServiceClient is the client API for CardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsServiceClient interface {
	UploadCardsData(ctx context.Context, in *CardsUploadRequest, opts ...grpc.CallOption) (*CardsUploadResponse, error)
	CleanCardsTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardsCleanResponse, error)
}

type cardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsServiceClient(cc grpc.ClientConnInterface) CardsServiceClient {
	return &cardsServiceClient{cc}
}

func (c *cardsServiceClient) UploadCardsData(ctx context.Context, in *CardsUploadRequest, opts ...grpc.CallOption) (*CardsUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsUploadResponse)
	err := c.cc.Invoke(ctx, CardsService_UploadCardsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsServiceClient) CleanCardsTable(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CardsCleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardsCleanResponse)
	err := c.cc.Invoke(ctx, CardsService_CleanCardsTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServiceServer is the server API for CardsService service.
// All implementations must embed UnimplementedCardsServiceServer
// for forward compatibility.
type CardsServiceServer interface {
	UploadCardsData(context.Context, *CardsUploadRequest) (*CardsUploadResponse, error)
	CleanCardsTable(context.Context, *emptypb.Empty) (*CardsCleanResponse, error)
	mustEmbedUnimplementedCardsServiceServer()
}

// UnimplementedCardsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsServiceServer struct{}

func (UnimplementedCardsServiceServer) UploadCardsData(context.Context, *CardsUploadRequest) (*CardsUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCardsData not implemented")
}
func (UnimplementedCardsServiceServer) CleanCardsTable(context.Context, *emptypb.Empty) (*CardsCleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanCardsTable not implemented")
}
func (UnimplementedCardsServiceServer) mustEmbedUnimplementedCardsServiceServer() {}
func (UnimplementedCardsServiceServer) testEmbeddedByValue()                      {}

// UnsafeCardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServiceServer will
// result in compilation errors.
type UnsafeCardsServiceServer interface {
	mustEmbedUnimplementedCardsServiceServer()
}

func RegisterCardsServiceServer(s grpc.ServiceRegistrar, srv CardsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCardsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CardsService_ServiceDesc, srv)
}

func _CardsService_UploadCardsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServiceServer).UploadCardsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardsService_UploadCardsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServiceServer).UploadCardsData(ctx, req.(*CardsUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardsService_CleanCardsTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServiceServer).CleanCardsTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CardsService_CleanCardsTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServiceServer).CleanCardsTable(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CardsService_ServiceDesc is the grpc.ServiceDesc for CardsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CardsService",
	HandlerType: (*CardsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadCardsData",
			Handler:    _CardsService_UploadCardsData_Handler,
		},
		{
			MethodName: "CleanCardsTable",
			Handler:    _CardsService_CleanCardsTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cards.proto",
}
